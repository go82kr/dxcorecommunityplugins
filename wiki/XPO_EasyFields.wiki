#summary Allows for use of XPO Simplied Criteria Syntax (creates/updates the PersistentBase.FieldsClass of your object, for easy field reference)
[http://www.rorybecker.me.uk/DevExpress/Plugins/Community/XPO_EasyFields/ http://dxcorecommunityplugins.googlecode.com/svn/trunk/Common/Graphics/Download.png]           [http://code.google.com/p/dxcorecommunityplugins/wiki/InstallInstructions  http://dxcorecommunityplugins.googlecode.com/svn/trunk/Common/Graphics/InstallHelp.png]

= Introduction =

XPO Simplified Criteria Syntax allows you to obtain your persistent objects properties via Object Orientated method.

Instead of:

{{{Dim MyCustomersStartingWithB as XPCollection(Of Customer)(New !BinaryOperator("!CompanyTradingName", "B%", Like)) }}}

After running XPO_!EasyFields you can now do:

{{{Dim MyCustomersStartingWithB as XPCollection(Of Customer)(New !BinaryOperator(Customer.Fields.!CompanyTradingName, "B%", Like))}}}

This not only easier to identify fields and relations via Intellisense, but is Strongly Typed, meaning if you wanted to Refactor your object and change the !CompanyTradingName property to say !TradingName, you will end up with Compile Errors highlighting where you have used that field, unlike the string representation which is perfectly valid code until it executes at Runtime and collapes in a heap ;)

= Configuration =

There are currently no options to configure, do you have a suggestion? Please don't hesitate to submit one.

= Usage =

Place the caret on the Class name of your persistent object, bring up the Refactor menu and select Update XPO FieldsClass

= History =

  * Build 1007
    * Ability to perform the update anywhere within the class
    * Shortcut included, you can now assign a shortcut to XPO Update FieldsClass
  * Build 997
    * Corrected some minor typos
  * Build 991
    * Initial Release

= Future Plans =

  * Shortcut key to allow easy execution
  * Possibly make it you have a XPCollection to return a "custom" class that would give options of AggregateOperands such as Count, Sum, Max, Min etc.

= Credits =

Author: Michael Proctor (AussieALF) with help from mentor RoryBecker ;)